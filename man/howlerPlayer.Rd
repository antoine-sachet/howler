% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/player.R
\name{howlerPlayer}
\alias{howlerPlayer}
\title{Howler.js Player}
\usage{
howlerPlayer(
  id,
  files,
  volume = 0.7,
  autoplay_next = TRUE,
  autoplay_loop = FALSE,
  seek_ping_rate = 1000
)
}
\arguments{
\item{id}{HTML id tag to be given to the howler player element}

\item{files}{Files that will be used in the player. This can either be a single vector, or a list where different
formats of the same file are kept in each element of the list. If named, the names are used as track titles. Otherwise,
the track titles will be derived from the filenames.}

\item{volume}{How loud the player should start off at. Defaults to 0.7 (70\%). If \code{\link{howlerVolumeSlider}} is
included, then this will be overridden by the value used there.}

\item{autoplay_next}{If there are multiple files, would you like to auto play the next file after the current
one has finished? Defaults to \code{TRUE}}

\item{autoplay_loop}{Once all files have been played, would you like to restart playing the playlist?
Defaults to \code{FALSE}}

\item{seek_ping_rate}{Number of milliseconds between each update of `input$\{id\}_seek` while playing. Default is
set to 1000. If set to 0, then `input$\{id\}_seek` will not exist.}
}
\value{
A shiny.tag containing all of the required options for a \code{Howl} JS object to be initialised in a shiny application.

On the server side there will be up to four additional objects available as inputs:
\describe{
\item{\code{\{id\}_playing}}{A logical value as to whether or not the \code{howlerPlayer} is playing audio}
\item{\code{\{id\}_track}}{Basename of the file currently loaded}
\item{\code{\{id\}_seek}}{(If \code{seek_ping_rate > 0}) the current time of the track loaded}
\item{\code{\{id\}_duration}}{The duration of the track loaded}
}
}
\description{
\code{howlerPlayer} is used to initialise the 'howler.js' framework by adding all of the specified tracks to the
player, and can be run by either including UI buttons or server-side actions.

In order for \code{howlerPlayer} to work, \code{\link{useHowlerJS}} must be included in the application UI.
}
\details{
All buttons associated with the \code{howlerPlayer} should be given the same \code{id} argument. This is to ensure
that the buttons are linked to the player.

i.e. If \code{howlerPlayer(id = "howler")}, then \code{howlerPlayButton(id = "howler")}
}
\examples{
if (interactive()) {
  library(shiny)

  ui <- fluidPage(
    title = "howler.js Player",
    useHowlerJS(),
    howlerPlayer("howler", "audio/sound.mp3"),
    howlerPlayPauseButton("howler")
  )

  server <- function(input, output) {
  }

  runShiny(ui, server)
}

\dontrun{
# Multiple file formats
howlerPlayer(
  "howler",
  list(
    c("audio/sound.webm", "audio/sound.mp3"),
    c("audio/sound2.webm", "audio/sound2.mp3"),
  )
)
}

}
\seealso{
\code{\link{howlerButton}}, \code{\link{howlerServer}}
}
